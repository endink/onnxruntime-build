name: windows-x64

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 1.20.0)"
        default: "1.17.3"
        required: true
      static_crt:
        default: "OFF"
        description: "Use Static CRT"
        required: true
        type: choice
        options:
        - "ON"
        - "OFF"

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.20.0' }}
  USE_STATIC_CRT: ${{ github.event.inputs.static_crt }}
  FORCE_SHARED_CRT: "ON"

jobs:
  windows_x64:
    name: Build onnxruntime lib for Windows x64 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.8"]

    steps:
      
      - name: Set Environment Variables
        if: ${{ env.USE_STATIC_CRT == 'ON' }}
        run: |
          echo "FORCE_SHARED_CRT: ${{ env.FORCE_SHARED_CRT }}"
          echo "USE_STATIC_CRT: ${{ env.USE_STATIC_CRT }}"
        env: 
          FORCE_SHARED_CRT: "OFF"
          SH_BUILD_OPTIONS: "--enable_msvc_static_runtime"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v2
        with:
          path: onnxruntime-win-x64-static_lib-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-win-x64-${{ env.ONNXRUNTIME_VERSION }}-cache-v1

      - name: ccache
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-x64

      - name: Checkout Onnx v${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: microsoft/onnxruntime
          submodules: true
          path: onnxruntime
          ref: v${{ env.ONNXRUNTIME_VERSION }}

      # - name: Download protoc
      #   if: steps.cache-build-result.outputs.cache-hit != 'true'
      #   shell: bash
      #   run: |
      #     # see ./cmake/deps.txt
      #     if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
      #       curl -SL -o protoc-3.20.3-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-win64.zip
      #       ls -lh
      #       file protoc-3.20.3-win64.zip
      #       unzip protoc-3.20.3-win64.zip
      #     elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.1[56789].[0-9] || ${{ env.ONNXRUNTIME_VERSION }} =~ 1.20.[0-9] ]]; then
      #       curl -SL -o protoc-21.12-win64.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-win64.zip
      #       ls -lh
      #       file protoc-21.12-win64.zip
      #       unzip protoc-21.12-win64.zip
      #     else
      #       echo "Unsupported version ${{ env.ONNXRUNTIME_VERSION }}"
      #       exit 1
      #     fi

      #     ./bin/protoc --version

      # - name: Set environment variable
      #   if: steps.cache-build-result.outputs.cache-hit != 'true'
      #   shell: bash
      #   run: |
      #     echo "$GITHUB_WORKSPACE/bin"  >> "$GITHUB_PATH"

      # - name: Display protoc info for ${{ env.ONNXRUNTIME_VERSION }}
      #   if: steps.cache-build-result.outputs.cache-hit != 'true'
      #   shell: bash
      #   run: |
      #     protoc --version

      - name: Show current directory
        shell: bash
        run: |
          ls -lh
          echo $PWD

      - name: Install dependencies
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python3 -m pip install cmake
          cmake --version


      - name: Build onnxruntime ${{ env.ONNXRUNTIME_VERSION }} for Windows x64
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export CMAKE_CXX_COMPILER_LAUNCHER=ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          cmake --version
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

          # export CMAKE_OPTIONS='-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded$<$<CONFIG:Debug>:Debug> -DONNX_USE_MSVC_STATIC_RUNTIME=ON -Dprotobuf_MSVC_STATIC_RUNTIME=ON -Dgtest_force_shared_crt=OFF -A x64 -Donnxruntime_BUILD_UNIT_TESTS=OFF -DONNX_CUSTOM_PROTOC_EXECUTABLE=$GITHUB_WORKSPACE/bin/protoc'
          export CMAKE_OPTIONS='-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded$<$<CONFIG:Debug>:Debug> -DONNX_USE_MSVC_STATIC_RUNTIME=${{ env.USE_STATIC_CRT }} -Dprotobuf_MSVC_STATIC_RUNTIME=${{ env.USE_STATIC_CRT }} -Dgtest_force_shared_crt=${{ env.FORCE_SHARED_CRT }} -A x64 -Donnxruntime_BUILD_UNIT_TESTS=OFF '
          ./build-static_lib.sh

      - name: Collect result
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ls -lh output/static_lib/
          ls -lh output/static_lib/include
          ls -lh output/static_lib/lib

          dst=onnxruntime-win-x64-static-${{ env.ONNXRUNTIME_VERSION }}
          mkdir $dst
          mv -v output/static_lib/* $dst

      - name: zip results
        shell: bash
        run: |
          dst=onnxruntime-win-x64-static-${{ env.ONNXRUNTIME_VERSION }}
          tar cjvf $dst.tar.bz2 $dst
          ls -lh

      # - name: Upload v${{ env.ONNXRUNTIME_VERSION }}
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     file_glob: true
      #     file: "./*.tar.bz2"
      #     overwrite: true
      #     repo_name: csukuangfj/onnxruntime-libs
      #     repo_token: ${{ secrets.UPLOAD_GH_SHERPA_ONNX_TOKEN }}
      #     tag: v${{ env.ONNXRUNTIME_VERSION }}

      - name: Upload artifact
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: onnxruntime-win-x64-static-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-win-x64-static-${{ env.ONNXRUNTIME_VERSION }}

      - name: Publish to huggingface (onnxruntime-libs)
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          if [ "${{ secrets.HF_TOKEN }}" != '' ]; then
            version=${{ env.ONNXRUNTIME_VERSION }}
            dst_dir=onnxruntime-win-x64-static-$version

            tar cjvf $dst_dir.tar.bz2 $dst_dir

            ls -lh

            git config --global user.email "csukuangfj@gmail.com"
            git config --global user.name "Fangjun Kuang"

            export GIT_CLONE_PROTECTION_ACTIVE=false
            GIT_LFS_SKIP_SMUDGE=1 git clone https://csukuangfj:$HF_TOKEN@huggingface.co/csukuangfj/onnxruntime-libs huggingface

            cd huggingface
            cp -v ../$dst_dir.tar.bz2 ./
            git status
            git lfs track "*.bz2"

            git add .

            git commit -m "upload $dst_dir.tar.bz2"
            git push https://csukuangfj:$HF_TOKEN@huggingface.co/csukuangfj/onnxruntime-libs main
            cd ..
            rm -rf huggingface
          else
            echo "Skip Upload huggingface";
          fi
          
